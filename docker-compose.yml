# Default docker-compose configuration for tgeld
# This configuration includes both the application and database in a single compose file
services:
  app:
    build:
      context: .
      target: runner
    restart: unless-stopped
    ports:
      - '21971:21971'
    volumes:
      - uploads:/app/uploads
    environment:
      - NODE_ENV=production
      # Default configuration assumes local database container
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=tgeld
      # Add your custom environment variables here
      
    # Health check ensures application is running properly
    healthcheck:
      test: ['CMD', 'wget', '--spider', 'http://localhost:21971/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy

  # Database service (PostgreSQL)
  # To use an external database instead:
  # 1. Comment out or remove this entire 'db' service
  # 2. Update the app service's DB_* environment variables to point to your external database
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      # Only exposed locally for security
      # Remove this ports section if you don't need direct database access
      - '127.0.0.1:5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=tgeld
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Optional backup service
  # Uncomment this section if you want automated database backups
  # backup:
  #   image: postgres:16-alpine
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data:ro
  #     - ./backups:/backups
  #   environment:
  #     - POSTGRES_PASSWORD=${DB_PASSWORD}
  #   entrypoint: |
  #     /bin/sh -c 'while true; do
  #       pg_dump -h db -U postgres tgeld > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql;
  #       find /backups -type f -mtime +7 -delete;
  #       sleep 86400;
  #     done'
  #   depends_on:
  #     - db

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local

# Additional notes:
# 1. Create a .env file with DB_PASSWORD before running
# 2. For external database: Remove 'db' service and update app's DB_* environment variables
# 3. For automated backups: Uncomment the backup service section
# 4. The uploads volume persists user uploads across container restarts
