version: '3.8'

services:
  app:
    build:
      context: .
      target: runner
    restart: unless-stopped
    ports:
      - "21971:21971"
    volumes:
      - uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=tgeld
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:21971/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432" # Only accessible locally
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=tgeld
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  backup:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    entrypoint: |
      /bin/sh -c 'while true; do
        pg_dump -h db -U postgres tgeld > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql;
        find /backups -type f -mtime +7 -delete;
        sleep 86400;
      done'
    depends_on:
      - db

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local 